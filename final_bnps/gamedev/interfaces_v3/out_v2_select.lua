-- In this file we define functions that serves outgame character creation


------------------------------------------------------------------------------------------------------------
-- create the game namespace without reseting if already created in an other file.
if outgame == nil then
	outgame = {}
	function outgame:pAh(arg)
		runAH(nil, "proc", arg)
	end
end

function outgame:openEditorMenu()
	if not isFullyPatched() then		
		messageBoxWithHelp(i18n.get("uiBGD_FullPatchNeeded"), "ui:outgame");		
		return
	end
	local value = getDbProp('UI:TEMP:HAS_EDITSESSION')
	if value == 0 then
		runAH(nil, "proc", "proc_charsel_edit_scenario")
	else

		local editorButton = getUI("ui:outgame:charsel:edit_session_but")
		assert(editorButton)

		local menuName =  "ui:outgame:r2ed_editor_menu"
		local menu = getUI(menuName)	
		assert(menu)
		launchContextMenuInGame(menu.id)
		menu.x = editorButton.x_real
		menu.y = editorButton.y_real + editorButton.h_real
		menu:updateCoords()	
	end
end

--[[
function outgame:openEditorMenuWarningNewScenario()
	local menuName =  "ui:outgame:r2ed_editor_new_sceneario_warning"
	local menu = getUI(menuName)
	menu.active = true
end--]]

function outgame:procCharselNotifaction(text)
	local ui = getUI("ui:outgame:charsel:log")
	if ui then
		if type(text) == "number" then
			if text < 2 then
				if text == 0 then
					ui:find("text").hardtext = i18n.get("uiCP_Export_Success")
				else
					ui:find("text").hardtext = i18n.get("uiCP_Export_Failed")
				end
			else
				self:pAh("proc_charsel_import_cancel")
				if text == 2 then
					ui:find("text").hardtext = i18n.get("uiCP_Import_Failed")
				else
					ui:find("text").hardtext = i18n.get("uiCP_Import_NotFound")
				end
			end
		else
			ui:find("text").hardtext = text
		end
		self:pAh("proc_charsel_notification")
	end
end

function outgame:procCharselExport()
	local slot = getDbProp("UI:TEMP:CHARSELSLOT")
	runAH(nil, "export_char", "slot="..slot)
end

function outgame:procCharselImport()
	local list = getUI("ui:outgame:charsel_import:import_list")
	if list then
		-- list group elements generated by c++
		local nb = list:getNumGroups()
		if nb > 0 then
			for i = 0, nb-1 do
				local element = list:getGroup(i)
				if element then
					if element:find("but").pushed then
						local char = string.match(element.id, "import_list:(.*)$")
						if char then
							self:pAh("proc_charsel_import_register|"..char)
							break
						end
					end
				end
			end
		end
	end
end

function outgame:procCharselClickSlot()
	local value = getDbProp('UI:SELECTED_SLOT')
	runAH(nil, "proc", "proc_charsel_clickslot|"..value)
end

function outgame:procCharselKeySlot()
	local ui = getUI("ui:outgame:charsel")
	if not getOnDraw(ui) then
		setOnDraw(ui, "outgame:eventCharselKeyGet()")
	end
end

function outgame:eventCharselKeyGet(event)
	if not event then
		if self.charsel == nil then
			self.charsel = {}
		end
		-- reset
		if not getUI("ui:outgame:charsel_import").active then
			self.charsel.import = nil
		else
			setCaptureKeyboard(getUI("ui:outgame:charsel_import:sv"))
		end
		return runAH(getUICaller(), "navigate_outgame", "")
	end
	local modals = {
		deletion = false,
		importation = false
	}
	-- list modals
	if getUI("ui:outgame:charsel_import").active then
		modals.importation = true
		-- update state
		local list = getUI("ui:outgame:charsel_import:import_list")
		if list then
			-- list group elements generated by c++
			local nb = list:getNumGroups()
			if nb > 0 then
				self.charsel.import = {}
				for i = 0, nb-1 do
					local element = list:getGroup(i)
					if element then
						table.insert(self.charsel.import, element)
					end
				end
			end
			-- to navigate in menu
			self.charsel.index = 1
		end
	end
	if getDbProp("UI:TEMP:CHARSELDELCHAR") > 0 then
		modals.deletion = true
	end
	local slot = getDbProp("UI:TEMP:CHARSELSLOT")
	-- event:
	if event > 2 then
		if event > 4 then
			if not modals.deletion then
				if getUI("ui:outgame:charsel:create_new_but").active then
					if event == 5 then
						if not modals.importation then
							self:pAh("proc_charsel_import")
						end
					end
				else
					if event == 7 then
						if getUI("ui:outgame:charsel:log").y == 256 then
							self:pAh("proc_charsel_export")
						end
					end
				end
			end
		else
			if modals.importation then
				local charsel_import = getUI("ui:outgame:charsel_import")
				if charsel_import then
					local but = "cancel"
					if event < 4 then
						but = "submit"
					end
					if charsel_import:find("select_"..but).active then
						local nb = #self.charsel.import
						-- select char savefile
						if event < 4 then
							if self.charsel.index >= nb then
								self.charsel.index = nb
							else
								self.charsel.index = self.charsel.index + 1
							end
						else
							if self.charsel.index <= 1 then
								self.charsel.index = 1
							else
								self.charsel.index = self.charsel.index - 1
							end
						end
						for i = 1, nb do
							local bval = false
							if i == self.charsel.index then
								bval = true
							end
							self.charsel.import[i]:find("but").pushed = bval
						end
					else
						if event < 4 then
							self:pAh("proc_charsel_import_over|1|0")
						else
							self:pAh("proc_charsel_import_over|0|1")
						end
					end
				end
				return
			end
			-- down
			if event == 3 then
				if modals.deletion then
					return self:pAh("proc_charsel_delchar_confirm_over|1|0")
				end
				if slot >= 4 then slot = 4 else slot = slot + 1 end
			else
				-- up
				if modals.deletion then
					return self:pAh("proc_charsel_delchar_confirm_over|0|1")
				end
				if slot <= 0 then slot = 0 else slot = slot - 1 end
			end
			self:pAh("proc_charsel_clickslot|"..slot)
		end
		return
	end
	if event > 0 then
		-- delete
		if event == 1 then
			if not modals.deletion and not modals.importation then
				if getUI("ui:outgame:charsel:slot"..slot).active then
					return self:pAh("proc_charsel_del")
				end
			end
			if modals.importation then
				return self:pAh("proc_charsel_import_cancel")
			end
			-- goto create if non-existent
		end
		-- enter
		if modals.importation then
			local charsel_import = getUI("ui:outgame:charsel_import")
			if charsel_import then
				if charsel_import:find("select_submit").active then
					return self:pAh("proc_charsel_import_enter")
				end
				self:pAh("proc_charsel_import_cancel")
			end
			return
		end
		if modals.deletion then
			local delchar_confirm = getUI("ui:outgame:charsel_delchar_confirm")
			if delchar_confirm then
				if delchar_confirm:find("select_submit").active then
					return self:pAh("proc_charsel_delchar_confirm_ok")
				end
				return self:pAh("proc_charsel_delchar_confirm_cancel")
			end
		else
			if getUI("ui:outgame:charsel:create_new_but").active then
				return self:pAh("proc_charsel_create_new")
			end
			outgame:launchGame()
			return
		end
	end
	-- escape
	if modals.deletion then
		return self:pAh("proc_charsel_delchar_confirm_cancel")
	end
	if modals.importation then
		return self:pAh("proc_charsel_import_cancel")
	end
	self:pAh("proc_quit")
end
